// Represents the traffic light that can show either red, green or yellow.
capsule TrafficLight {
[[rt::decl]]
`
    private: 
        RTTimerId cycleTimer;   
`

    behavior port log : Log;    
    behavior port timer : Timing;
    behavior port pedTimer : Timing;
    service behavior port control : TrafficLightControl;
    service behavior port ui : TrafficLightSignals;
    service behavior port pedLightControl~ : PedLightControl;

    statemachine {
        state CycleLight {
            entrypoint ep, pedReady;
            exitpoint pedRequest;

            state Red[[rt::properties(color="#e60f0f")]] {
                entry 
                `
                    log.log("Enter Red");
                    log.commit();
                    ui.red().send();
                `;
            }, Green[[rt::properties(color="#11d80e")]] {
                entry 
                `
                    log.log("Enter Green");
                    log.commit();
                    ui.green().send();
                `;
            }, Yellow[[rt::properties(color="#edc707")]] {
                entry 
                `
                    log.log("Enter Yellow");
                    log.commit();
                    ui.yellow().send();
                `;
            };

            ep -> Red;
            red_to_green: Red -> Green on timer.timeout
            `
                log.log("Red -> Green");
                log.commit();
            `
            ;
            green_to_yellow: Green -> Yellow on timer.timeout
            `
                log.log("Green -> Yellow");
                log.commit();
            `
            ;
            yellow_to_red: Yellow -> Red on timer.timeout
            `
                log.log("Yellow -> Red");
                log.commit();
            `
            ;

            pedReady -> Red;
        };
        initial -> CycleLight.ep 
        `
            log.log("TrafficLight starts up");
            log.commit();
            cycleTimer = timer.informEvery(RTTimespec(2,0));
        `;
    
        state PedestrianCrossing {
            entrypoint pedRequest;
            exitpoint pedReady;

            entry
            `
                bool waitForWalk = true;
                pedTimer.informIn(RTTimespec(2,0), &waitForWalk, &RTType_bool);
            `;

            state Red [[rt::properties(color="#e60f0f")]] {
                entry
                `
                    log.log("Enter Red");
                    log.commit();
                    ui.red().send();
                `;
            };

            pedRequest -> Red;

            updatePedLight: on pedTimer.timeout
            `
                if (*((bool*) rtdata) == true) {
                    pedLightControl.walk().send();
                    bool waitForWalk = false;
                    pedTimer.informIn(RTTimespec(4,0), &waitForWalk, &RTType_bool);
                    // Time for pedestrians to cross
                }
                else {
                    pedLightControl.stop().send();
                    timer.informIn(RTTimespec(2,0));
                }
            `;

            pedRequest_ignored: on control.pedestrian
            `
                // Ignore additional requests from pedestrians since we already are in the PedestriansCrossing state.
            `;
        };

        pedRequest : CycleLight.pedRequest -> PedestrianCrossing.pedRequest on control.pedestrian
        `
            log.log("Pedestrian requests to cross");
            log.commit();
            timer.cancelTimer(cycleTimer);
        `
        ;

        pedReady: PedestrianCrossing.pedReady -> CycleLight.pedReady on timer.timeout
        `
            log.log("Pedestrians ready");
            log.commit();
            cycleTimer = timer.informEvery(RTTimespec(2,0));
        `
        ;
    };
};